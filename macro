#!/usr/local/bin/python3
import click
import re
import sys
from typing import Dict
import os
import subprocess

MACRO_FILE: str = f"{os.path.expanduser('~')}/scripts/.macros"
ARGUMENT_REGEX = r'\#\d'

# COLORS
RED     = "\u001b[31m"
RESET   = "\u001b[0m"
PINK    = "\033[38;5;207m"

def echo(message: str, color: str = None, bold: bool = False, newline: bool = True):
    click.echo(click.style(message, fg=color, bold=bold), nl=newline)


def _resolve_macro_file() -> Dict[str, str]:
    if not os.path.isfile(MACRO_FILE):
        with open(MACRO_FILE, "w+"):
            pass
    
    with open(MACRO_FILE, "r+") as f:
        d = {}
        for line in f.readlines():
            line = line.strip()
            x: [str] = line.split('ðŸ˜€')
            d[x[0]] = x[1]
        return d


def _write_macro_file(macros: Dict[str, str]):
    if not os.path.isfile(MACRO_FILE):
        echo("Could not find macro file.")
        sys.exit(1)

    with open(MACRO_FILE, "w+") as f:
        f.writelines([f"{k}ðŸ˜€{v}\n" for k, v in macros.items()])


def _validate_all_arguments_set(macro: str) -> bool:
    return re.search(ARGUMENT_REGEX, macro) == None



def __color_generator(color: str):
    def _color(match):
        return f"{color}{match.group(0)}{RESET}"
    return _color


def _color_matching_text(regex_pattern: str, text: str, color: str) -> str:
    return re.sub(regex_pattern, __color_generator(color), text)


@click.group()
@click.pass_context
def run(ctx):
    pass


@run.command("record")
@click.option("-m", "--macro-name", required=False, help="The name of the macro. Used to invoke the command.")
def record(macro_name: str):
    """ Records a macro and stores it in the list of macros. """
    if not macro_name:
        macro_name = click.prompt("Enter a name for the macro")
        if not macro_name:
            sys.exit(1)
    
    macro_command = click.prompt("Enter a command for the macro")
    if not macro_command:
        sys.exit(1)

    macros: Dict[str, str] = _resolve_macro_file()
    macros[macro_name] = macro_command
    _write_macro_file(macros)


@run.command("remove")
@click.argument("macro-name")
def remove(macro_name: str):
    """ Removes a macro from the list of stored macros if it exists. """
    if not macro_name:
        macro_name = click.prompt("Enter a name for the macro to remove.")
        if not macro_name:
            sys.exit(1)

    macros: Dict[str, str] = _resolve_macro_file()
    if macro_name not in macros:
        click.secho("Macro name does not exist.")
        sys.exit(1)

    macros.pop(macro_name)
    _write_macro_file(macros)


@run.command("run")
@click.argument("macro-name")
@click.argument("args", nargs=-1)
def run_macro(macro_name: str, args):
    """ Runs the provided macro. """
    macros = _resolve_macro_file()
    if macro_name not in macros:
        click.secho("Macro name does not exist.")
        sys.exit(1)
    macro: str = macros[macro_name]
    for i, arg in enumerate(args):
        macro = macro.replace(f"#{i + 1}", arg)
    
    # Validate arguments were set in the macro
    if not _validate_all_arguments_set(macro):
        click.secho("Macro does not have all arguments specified.")
        click.secho(macro)
        sys.exit(1)
    subprocess.run(macro, shell=True)


@run.command("list")
def list():
    """ Lists all currently stored macros. """
    macros = _resolve_macro_file()
    for k, v in macros.items():
        echo(k, color="green", newline=False)
        colored_value = _color_matching_text('\\#\\d', v, PINK)
        echo(f":\t{colored_value}")
    
    if len(macros.items()) == 0:
        click.secho("No macros found. Run `macro record` to record a macro.")


if __name__ == '__main__':
    run()